//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QuanLy {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SieuThiDataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SieuThiDataSet1 : System.Data.DataSet {
        
        private CTHDDataTable tableCTHD;
        
        private HoaDonDataTable tableHoaDon;
        
        private LoaiHangDataTable tableLoaiHang;
        
        private MatHangDataTable tableMatHang;
        
        private NhanVienDataTable tableNhanVien;
        
        private System.Data.DataRelation relationfk_CTHD_HoaDon;
        
        private System.Data.DataRelation relationfk_CTHD_MatHang;
        
        private System.Data.DataRelation relationfk_MatHang_LoaiHang;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SieuThiDataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SieuThiDataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CTHD"] != null)) {
                    base.Tables.Add(new CTHDDataTable(ds.Tables["CTHD"]));
                }
                if ((ds.Tables["HoaDon"] != null)) {
                    base.Tables.Add(new HoaDonDataTable(ds.Tables["HoaDon"]));
                }
                if ((ds.Tables["LoaiHang"] != null)) {
                    base.Tables.Add(new LoaiHangDataTable(ds.Tables["LoaiHang"]));
                }
                if ((ds.Tables["MatHang"] != null)) {
                    base.Tables.Add(new MatHangDataTable(ds.Tables["MatHang"]));
                }
                if ((ds.Tables["NhanVien"] != null)) {
                    base.Tables.Add(new NhanVienDataTable(ds.Tables["NhanVien"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CTHDDataTable CTHD {
            get {
                return this.tableCTHD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoaDonDataTable HoaDon {
            get {
                return this.tableHoaDon;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoaiHangDataTable LoaiHang {
            get {
                return this.tableLoaiHang;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MatHangDataTable MatHang {
            get {
                return this.tableMatHang;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NhanVienDataTable NhanVien {
            get {
                return this.tableNhanVien;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SieuThiDataSet1 cln = ((SieuThiDataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CTHD"] != null)) {
                    base.Tables.Add(new CTHDDataTable(ds.Tables["CTHD"]));
                }
                if ((ds.Tables["HoaDon"] != null)) {
                    base.Tables.Add(new HoaDonDataTable(ds.Tables["HoaDon"]));
                }
                if ((ds.Tables["LoaiHang"] != null)) {
                    base.Tables.Add(new LoaiHangDataTable(ds.Tables["LoaiHang"]));
                }
                if ((ds.Tables["MatHang"] != null)) {
                    base.Tables.Add(new MatHangDataTable(ds.Tables["MatHang"]));
                }
                if ((ds.Tables["NhanVien"] != null)) {
                    base.Tables.Add(new NhanVienDataTable(ds.Tables["NhanVien"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCTHD = ((CTHDDataTable)(base.Tables["CTHD"]));
            if ((initTable == true)) {
                if ((this.tableCTHD != null)) {
                    this.tableCTHD.InitVars();
                }
            }
            this.tableHoaDon = ((HoaDonDataTable)(base.Tables["HoaDon"]));
            if ((initTable == true)) {
                if ((this.tableHoaDon != null)) {
                    this.tableHoaDon.InitVars();
                }
            }
            this.tableLoaiHang = ((LoaiHangDataTable)(base.Tables["LoaiHang"]));
            if ((initTable == true)) {
                if ((this.tableLoaiHang != null)) {
                    this.tableLoaiHang.InitVars();
                }
            }
            this.tableMatHang = ((MatHangDataTable)(base.Tables["MatHang"]));
            if ((initTable == true)) {
                if ((this.tableMatHang != null)) {
                    this.tableMatHang.InitVars();
                }
            }
            this.tableNhanVien = ((NhanVienDataTable)(base.Tables["NhanVien"]));
            if ((initTable == true)) {
                if ((this.tableNhanVien != null)) {
                    this.tableNhanVien.InitVars();
                }
            }
            this.relationfk_CTHD_HoaDon = this.Relations["fk_CTHD_HoaDon"];
            this.relationfk_CTHD_MatHang = this.Relations["fk_CTHD_MatHang"];
            this.relationfk_MatHang_LoaiHang = this.Relations["fk_MatHang_LoaiHang"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SieuThiDataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SieuThiDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCTHD = new CTHDDataTable();
            base.Tables.Add(this.tableCTHD);
            this.tableHoaDon = new HoaDonDataTable();
            base.Tables.Add(this.tableHoaDon);
            this.tableLoaiHang = new LoaiHangDataTable();
            base.Tables.Add(this.tableLoaiHang);
            this.tableMatHang = new MatHangDataTable();
            base.Tables.Add(this.tableMatHang);
            this.tableNhanVien = new NhanVienDataTable();
            base.Tables.Add(this.tableNhanVien);
            this.relationfk_CTHD_HoaDon = new System.Data.DataRelation("fk_CTHD_HoaDon", new System.Data.DataColumn[] {
                        this.tableHoaDon.SoHDColumn}, new System.Data.DataColumn[] {
                        this.tableCTHD.SoHDColumn}, false);
            this.Relations.Add(this.relationfk_CTHD_HoaDon);
            this.relationfk_CTHD_MatHang = new System.Data.DataRelation("fk_CTHD_MatHang", new System.Data.DataColumn[] {
                        this.tableMatHang.MaMHColumn}, new System.Data.DataColumn[] {
                        this.tableCTHD.MaMHColumn}, false);
            this.Relations.Add(this.relationfk_CTHD_MatHang);
            this.relationfk_MatHang_LoaiHang = new System.Data.DataRelation("fk_MatHang_LoaiHang", new System.Data.DataColumn[] {
                        this.tableLoaiHang.MaLHColumn}, new System.Data.DataColumn[] {
                        this.tableMatHang.MaLHColumn}, false);
            this.Relations.Add(this.relationfk_MatHang_LoaiHang);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCTHD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHoaDon() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoaiHang() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMatHang() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNhanVien() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SieuThiDataSet1 ds = new SieuThiDataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CTHDRowChangeEventHandler(object sender, CTHDRowChangeEvent e);
        
        public delegate void HoaDonRowChangeEventHandler(object sender, HoaDonRowChangeEvent e);
        
        public delegate void LoaiHangRowChangeEventHandler(object sender, LoaiHangRowChangeEvent e);
        
        public delegate void MatHangRowChangeEventHandler(object sender, MatHangRowChangeEvent e);
        
        public delegate void NhanVienRowChangeEventHandler(object sender, NhanVienRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CTHDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSoHD;
            
            private System.Data.DataColumn columnMaMH;
            
            private System.Data.DataColumn columnDGBan;
            
            private System.Data.DataColumn columnSL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDDataTable() {
                this.TableName = "CTHD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CTHDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CTHDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoHDColumn {
                get {
                    return this.columnSoHD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaMHColumn {
                get {
                    return this.columnMaMH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DGBanColumn {
                get {
                    return this.columnDGBan;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SLColumn {
                get {
                    return this.columnSL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow this[int index] {
                get {
                    return ((CTHDRow)(this.Rows[index]));
                }
            }
            
            public event CTHDRowChangeEventHandler CTHDRowChanging;
            
            public event CTHDRowChangeEventHandler CTHDRowChanged;
            
            public event CTHDRowChangeEventHandler CTHDRowDeleting;
            
            public event CTHDRowChangeEventHandler CTHDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCTHDRow(CTHDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow AddCTHDRow(HoaDonRow parentHoaDonRowByfk_CTHD_HoaDon, MatHangRow parentMatHangRowByfk_CTHD_MatHang, int DGBan, short SL) {
                CTHDRow rowCTHDRow = ((CTHDRow)(this.NewRow()));
                rowCTHDRow.ItemArray = new object[] {
                        parentHoaDonRowByfk_CTHD_HoaDon[0],
                        parentMatHangRowByfk_CTHD_MatHang[0],
                        DGBan,
                        SL};
                this.Rows.Add(rowCTHDRow);
                return rowCTHDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow FindBySoHDMaMH(int SoHD, int MaMH) {
                return ((CTHDRow)(this.Rows.Find(new object[] {
                            SoHD,
                            MaMH})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CTHDDataTable cln = ((CTHDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CTHDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSoHD = base.Columns["SoHD"];
                this.columnMaMH = base.Columns["MaMH"];
                this.columnDGBan = base.Columns["DGBan"];
                this.columnSL = base.Columns["SL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSoHD = new System.Data.DataColumn("SoHD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoHD);
                this.columnMaMH = new System.Data.DataColumn("MaMH", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaMH);
                this.columnDGBan = new System.Data.DataColumn("DGBan", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDGBan);
                this.columnSL = new System.Data.DataColumn("SL", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSL);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSoHD,
                                this.columnMaMH}, true));
                this.columnSoHD.AllowDBNull = false;
                this.columnMaMH.AllowDBNull = false;
                this.columnDGBan.AllowDBNull = false;
                this.columnSL.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow NewCTHDRow() {
                return ((CTHDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CTHDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CTHDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CTHDRowChanged != null)) {
                    this.CTHDRowChanged(this, new CTHDRowChangeEvent(((CTHDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CTHDRowChanging != null)) {
                    this.CTHDRowChanging(this, new CTHDRowChangeEvent(((CTHDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CTHDRowDeleted != null)) {
                    this.CTHDRowDeleted(this, new CTHDRowChangeEvent(((CTHDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CTHDRowDeleting != null)) {
                    this.CTHDRowDeleting(this, new CTHDRowChangeEvent(((CTHDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCTHDRow(CTHDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SieuThiDataSet1 ds = new SieuThiDataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CTHDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HoaDonDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSoHD;
            
            private System.Data.DataColumn columnMaNV;
            
            private System.Data.DataColumn columnNgayHD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonDataTable() {
                this.TableName = "HoaDon";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoaDonDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HoaDonDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoHDColumn {
                get {
                    return this.columnSoHD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaNVColumn {
                get {
                    return this.columnMaNV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NgayHDColumn {
                get {
                    return this.columnNgayHD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow this[int index] {
                get {
                    return ((HoaDonRow)(this.Rows[index]));
                }
            }
            
            public event HoaDonRowChangeEventHandler HoaDonRowChanging;
            
            public event HoaDonRowChangeEventHandler HoaDonRowChanged;
            
            public event HoaDonRowChangeEventHandler HoaDonRowDeleting;
            
            public event HoaDonRowChangeEventHandler HoaDonRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHoaDonRow(HoaDonRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow AddHoaDonRow(int SoHD, int MaNV, System.DateTime NgayHD) {
                HoaDonRow rowHoaDonRow = ((HoaDonRow)(this.NewRow()));
                rowHoaDonRow.ItemArray = new object[] {
                        SoHD,
                        MaNV,
                        NgayHD};
                this.Rows.Add(rowHoaDonRow);
                return rowHoaDonRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow FindBySoHD(int SoHD) {
                return ((HoaDonRow)(this.Rows.Find(new object[] {
                            SoHD})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HoaDonDataTable cln = ((HoaDonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HoaDonDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSoHD = base.Columns["SoHD"];
                this.columnMaNV = base.Columns["MaNV"];
                this.columnNgayHD = base.Columns["NgayHD"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSoHD = new System.Data.DataColumn("SoHD", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoHD);
                this.columnMaNV = new System.Data.DataColumn("MaNV", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaNV);
                this.columnNgayHD = new System.Data.DataColumn("NgayHD", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayHD);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSoHD}, true));
                this.columnSoHD.AllowDBNull = false;
                this.columnSoHD.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow NewHoaDonRow() {
                return ((HoaDonRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HoaDonRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HoaDonRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HoaDonRowChanged != null)) {
                    this.HoaDonRowChanged(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HoaDonRowChanging != null)) {
                    this.HoaDonRowChanging(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HoaDonRowDeleted != null)) {
                    this.HoaDonRowDeleted(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HoaDonRowDeleting != null)) {
                    this.HoaDonRowDeleting(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHoaDonRow(HoaDonRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SieuThiDataSet1 ds = new SieuThiDataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoaDonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoaiHangDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMaLH;
            
            private System.Data.DataColumn columnTenLH;
            
            private System.Data.DataColumn columnMoTa;
            
            private System.Data.DataColumn columnHinh;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangDataTable() {
                this.TableName = "LoaiHang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoaiHangDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoaiHangDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaLHColumn {
                get {
                    return this.columnMaLH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TenLHColumn {
                get {
                    return this.columnTenLH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MoTaColumn {
                get {
                    return this.columnMoTa;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HinhColumn {
                get {
                    return this.columnHinh;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow this[int index] {
                get {
                    return ((LoaiHangRow)(this.Rows[index]));
                }
            }
            
            public event LoaiHangRowChangeEventHandler LoaiHangRowChanging;
            
            public event LoaiHangRowChangeEventHandler LoaiHangRowChanged;
            
            public event LoaiHangRowChangeEventHandler LoaiHangRowDeleting;
            
            public event LoaiHangRowChangeEventHandler LoaiHangRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoaiHangRow(LoaiHangRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow AddLoaiHangRow(byte MaLH, string TenLH, string MoTa, byte[] Hinh) {
                LoaiHangRow rowLoaiHangRow = ((LoaiHangRow)(this.NewRow()));
                rowLoaiHangRow.ItemArray = new object[] {
                        MaLH,
                        TenLH,
                        MoTa,
                        Hinh};
                this.Rows.Add(rowLoaiHangRow);
                return rowLoaiHangRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow FindByMaLH(byte MaLH) {
                return ((LoaiHangRow)(this.Rows.Find(new object[] {
                            MaLH})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LoaiHangDataTable cln = ((LoaiHangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LoaiHangDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaLH = base.Columns["MaLH"];
                this.columnTenLH = base.Columns["TenLH"];
                this.columnMoTa = base.Columns["MoTa"];
                this.columnHinh = base.Columns["Hinh"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaLH = new System.Data.DataColumn("MaLH", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaLH);
                this.columnTenLH = new System.Data.DataColumn("TenLH", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenLH);
                this.columnMoTa = new System.Data.DataColumn("MoTa", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoTa);
                this.columnHinh = new System.Data.DataColumn("Hinh", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHinh);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMaLH}, true));
                this.columnMaLH.AllowDBNull = false;
                this.columnMaLH.Unique = true;
                this.columnTenLH.AllowDBNull = false;
                this.columnTenLH.MaxLength = 50;
                this.columnMoTa.MaxLength = 1073741823;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow NewLoaiHangRow() {
                return ((LoaiHangRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LoaiHangRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LoaiHangRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoaiHangRowChanged != null)) {
                    this.LoaiHangRowChanged(this, new LoaiHangRowChangeEvent(((LoaiHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoaiHangRowChanging != null)) {
                    this.LoaiHangRowChanging(this, new LoaiHangRowChangeEvent(((LoaiHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoaiHangRowDeleted != null)) {
                    this.LoaiHangRowDeleted(this, new LoaiHangRowChangeEvent(((LoaiHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoaiHangRowDeleting != null)) {
                    this.LoaiHangRowDeleting(this, new LoaiHangRowChangeEvent(((LoaiHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoaiHangRow(LoaiHangRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SieuThiDataSet1 ds = new SieuThiDataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoaiHangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MatHangDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMaMH;
            
            private System.Data.DataColumn columnTenMH;
            
            private System.Data.DataColumn columnMaNCC;
            
            private System.Data.DataColumn columnMaLH;
            
            private System.Data.DataColumn columnDVT;
            
            private System.Data.DataColumn columnDonGia;
            
            private System.Data.DataColumn columnSoTon;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangDataTable() {
                this.TableName = "MatHang";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MatHangDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MatHangDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaMHColumn {
                get {
                    return this.columnMaMH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TenMHColumn {
                get {
                    return this.columnTenMH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaNCCColumn {
                get {
                    return this.columnMaNCC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaLHColumn {
                get {
                    return this.columnMaLH;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DVTColumn {
                get {
                    return this.columnDVT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DonGiaColumn {
                get {
                    return this.columnDonGia;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoTonColumn {
                get {
                    return this.columnSoTon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow this[int index] {
                get {
                    return ((MatHangRow)(this.Rows[index]));
                }
            }
            
            public event MatHangRowChangeEventHandler MatHangRowChanging;
            
            public event MatHangRowChangeEventHandler MatHangRowChanged;
            
            public event MatHangRowChangeEventHandler MatHangRowDeleting;
            
            public event MatHangRowChangeEventHandler MatHangRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMatHangRow(MatHangRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow AddMatHangRow(int MaMH, string TenMH, int MaNCC, LoaiHangRow parentLoaiHangRowByfk_MatHang_LoaiHang, string DVT, decimal DonGia, double SoTon) {
                MatHangRow rowMatHangRow = ((MatHangRow)(this.NewRow()));
                rowMatHangRow.ItemArray = new object[] {
                        MaMH,
                        TenMH,
                        MaNCC,
                        parentLoaiHangRowByfk_MatHang_LoaiHang[0],
                        DVT,
                        DonGia,
                        SoTon};
                this.Rows.Add(rowMatHangRow);
                return rowMatHangRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow FindByMaMH(int MaMH) {
                return ((MatHangRow)(this.Rows.Find(new object[] {
                            MaMH})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MatHangDataTable cln = ((MatHangDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MatHangDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaMH = base.Columns["MaMH"];
                this.columnTenMH = base.Columns["TenMH"];
                this.columnMaNCC = base.Columns["MaNCC"];
                this.columnMaLH = base.Columns["MaLH"];
                this.columnDVT = base.Columns["DVT"];
                this.columnDonGia = base.Columns["DonGia"];
                this.columnSoTon = base.Columns["SoTon"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaMH = new System.Data.DataColumn("MaMH", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaMH);
                this.columnTenMH = new System.Data.DataColumn("TenMH", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenMH);
                this.columnMaNCC = new System.Data.DataColumn("MaNCC", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaNCC);
                this.columnMaLH = new System.Data.DataColumn("MaLH", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaLH);
                this.columnDVT = new System.Data.DataColumn("DVT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVT);
                this.columnDonGia = new System.Data.DataColumn("DonGia", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonGia);
                this.columnSoTon = new System.Data.DataColumn("SoTon", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoTon);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMaMH}, true));
                this.columnMaMH.AllowDBNull = false;
                this.columnMaMH.Unique = true;
                this.columnTenMH.AllowDBNull = false;
                this.columnTenMH.MaxLength = 40;
                this.columnDVT.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow NewMatHangRow() {
                return ((MatHangRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MatHangRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MatHangRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MatHangRowChanged != null)) {
                    this.MatHangRowChanged(this, new MatHangRowChangeEvent(((MatHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MatHangRowChanging != null)) {
                    this.MatHangRowChanging(this, new MatHangRowChangeEvent(((MatHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MatHangRowDeleted != null)) {
                    this.MatHangRowDeleted(this, new MatHangRowChangeEvent(((MatHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MatHangRowDeleting != null)) {
                    this.MatHangRowDeleting(this, new MatHangRowChangeEvent(((MatHangRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMatHangRow(MatHangRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SieuThiDataSet1 ds = new SieuThiDataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MatHangDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NhanVienDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMaNV;
            
            private System.Data.DataColumn columnHo;
            
            private System.Data.DataColumn columnTen;
            
            private System.Data.DataColumn columnPhai;
            
            private System.Data.DataColumn columnDiaChi;
            
            private System.Data.DataColumn columnDienThoai;
            
            private System.Data.DataColumn columnHinh;
            
            private System.Data.DataColumn columnLuongCB;
            
            private System.Data.DataColumn columnCongViec;
            
            private System.Data.DataColumn columnMaKV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienDataTable() {
                this.TableName = "NhanVien";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NhanVienDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NhanVienDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaNVColumn {
                get {
                    return this.columnMaNV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HoColumn {
                get {
                    return this.columnHo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TenColumn {
                get {
                    return this.columnTen;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhaiColumn {
                get {
                    return this.columnPhai;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiaChiColumn {
                get {
                    return this.columnDiaChi;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DienThoaiColumn {
                get {
                    return this.columnDienThoai;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HinhColumn {
                get {
                    return this.columnHinh;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LuongCBColumn {
                get {
                    return this.columnLuongCB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CongViecColumn {
                get {
                    return this.columnCongViec;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaKVColumn {
                get {
                    return this.columnMaKV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRow this[int index] {
                get {
                    return ((NhanVienRow)(this.Rows[index]));
                }
            }
            
            public event NhanVienRowChangeEventHandler NhanVienRowChanging;
            
            public event NhanVienRowChangeEventHandler NhanVienRowChanged;
            
            public event NhanVienRowChangeEventHandler NhanVienRowDeleting;
            
            public event NhanVienRowChangeEventHandler NhanVienRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNhanVienRow(NhanVienRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRow AddNhanVienRow(int MaNV, string Ho, string Ten, string Phai, string DiaChi, string DienThoai, byte[] Hinh, double LuongCB, string CongViec, byte MaKV) {
                NhanVienRow rowNhanVienRow = ((NhanVienRow)(this.NewRow()));
                rowNhanVienRow.ItemArray = new object[] {
                        MaNV,
                        Ho,
                        Ten,
                        Phai,
                        DiaChi,
                        DienThoai,
                        Hinh,
                        LuongCB,
                        CongViec,
                        MaKV};
                this.Rows.Add(rowNhanVienRow);
                return rowNhanVienRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRow FindByMaNV(int MaNV) {
                return ((NhanVienRow)(this.Rows.Find(new object[] {
                            MaNV})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NhanVienDataTable cln = ((NhanVienDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NhanVienDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaNV = base.Columns["MaNV"];
                this.columnHo = base.Columns["Ho"];
                this.columnTen = base.Columns["Ten"];
                this.columnPhai = base.Columns["Phai"];
                this.columnDiaChi = base.Columns["DiaChi"];
                this.columnDienThoai = base.Columns["DienThoai"];
                this.columnHinh = base.Columns["Hinh"];
                this.columnLuongCB = base.Columns["LuongCB"];
                this.columnCongViec = base.Columns["CongViec"];
                this.columnMaKV = base.Columns["MaKV"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaNV = new System.Data.DataColumn("MaNV", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaNV);
                this.columnHo = new System.Data.DataColumn("Ho", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHo);
                this.columnTen = new System.Data.DataColumn("Ten", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTen);
                this.columnPhai = new System.Data.DataColumn("Phai", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhai);
                this.columnDiaChi = new System.Data.DataColumn("DiaChi", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiaChi);
                this.columnDienThoai = new System.Data.DataColumn("DienThoai", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDienThoai);
                this.columnHinh = new System.Data.DataColumn("Hinh", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHinh);
                this.columnLuongCB = new System.Data.DataColumn("LuongCB", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLuongCB);
                this.columnCongViec = new System.Data.DataColumn("CongViec", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCongViec);
                this.columnMaKV = new System.Data.DataColumn("MaKV", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaKV);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMaNV}, true));
                this.columnMaNV.AllowDBNull = false;
                this.columnMaNV.Unique = true;
                this.columnHo.MaxLength = 30;
                this.columnTen.MaxLength = 7;
                this.columnPhai.MaxLength = 3;
                this.columnDiaChi.MaxLength = 60;
                this.columnDienThoai.MaxLength = 10;
                this.columnCongViec.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRow NewNhanVienRow() {
                return ((NhanVienRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NhanVienRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NhanVienRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NhanVienRowChanged != null)) {
                    this.NhanVienRowChanged(this, new NhanVienRowChangeEvent(((NhanVienRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NhanVienRowChanging != null)) {
                    this.NhanVienRowChanging(this, new NhanVienRowChangeEvent(((NhanVienRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NhanVienRowDeleted != null)) {
                    this.NhanVienRowDeleted(this, new NhanVienRowChangeEvent(((NhanVienRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NhanVienRowDeleting != null)) {
                    this.NhanVienRowDeleting(this, new NhanVienRowChangeEvent(((NhanVienRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNhanVienRow(NhanVienRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SieuThiDataSet1 ds = new SieuThiDataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NhanVienDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CTHDRow : System.Data.DataRow {
            
            private CTHDDataTable tableCTHD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CTHDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCTHD = ((CTHDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoHD {
                get {
                    return ((int)(this[this.tableCTHD.SoHDColumn]));
                }
                set {
                    this[this.tableCTHD.SoHDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaMH {
                get {
                    return ((int)(this[this.tableCTHD.MaMHColumn]));
                }
                set {
                    this[this.tableCTHD.MaMHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DGBan {
                get {
                    return ((int)(this[this.tableCTHD.DGBanColumn]));
                }
                set {
                    this[this.tableCTHD.DGBanColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SL {
                get {
                    return ((short)(this[this.tableCTHD.SLColumn]));
                }
                set {
                    this[this.tableCTHD.SLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow HoaDonRow {
                get {
                    return ((HoaDonRow)(this.GetParentRow(this.Table.ParentRelations["fk_CTHD_HoaDon"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fk_CTHD_HoaDon"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow MatHangRow {
                get {
                    return ((MatHangRow)(this.GetParentRow(this.Table.ParentRelations["fk_CTHD_MatHang"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fk_CTHD_MatHang"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HoaDonRow : System.Data.DataRow {
            
            private HoaDonDataTable tableHoaDon;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoaDonRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoaDon = ((HoaDonDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoHD {
                get {
                    return ((int)(this[this.tableHoaDon.SoHDColumn]));
                }
                set {
                    this[this.tableHoaDon.SoHDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaNV {
                get {
                    try {
                        return ((int)(this[this.tableHoaDon.MaNVColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaNV\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.MaNVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NgayHD {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableHoaDon.NgayHDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NgayHD\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.NgayHDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaNVNull() {
                return this.IsNull(this.tableHoaDon.MaNVColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaNVNull() {
                this[this.tableHoaDon.MaNVColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayHDNull() {
                return this.IsNull(this.tableHoaDon.NgayHDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayHDNull() {
                this[this.tableHoaDon.NgayHDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow[] GetCTHDRows() {
                return ((CTHDRow[])(base.GetChildRows(this.Table.ChildRelations["fk_CTHD_HoaDon"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoaiHangRow : System.Data.DataRow {
            
            private LoaiHangDataTable tableLoaiHang;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoaiHangRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoaiHang = ((LoaiHangDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaLH {
                get {
                    return ((byte)(this[this.tableLoaiHang.MaLHColumn]));
                }
                set {
                    this[this.tableLoaiHang.MaLHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenLH {
                get {
                    return ((string)(this[this.tableLoaiHang.TenLHColumn]));
                }
                set {
                    this[this.tableLoaiHang.TenLHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MoTa {
                get {
                    try {
                        return ((string)(this[this.tableLoaiHang.MoTaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MoTa\' in table \'LoaiHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoaiHang.MoTaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Hinh {
                get {
                    try {
                        return ((byte[])(this[this.tableLoaiHang.HinhColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Hinh\' in table \'LoaiHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoaiHang.HinhColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMoTaNull() {
                return this.IsNull(this.tableLoaiHang.MoTaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMoTaNull() {
                this[this.tableLoaiHang.MoTaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHinhNull() {
                return this.IsNull(this.tableLoaiHang.HinhColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHinhNull() {
                this[this.tableLoaiHang.HinhColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow[] GetMatHangRows() {
                return ((MatHangRow[])(base.GetChildRows(this.Table.ChildRelations["fk_MatHang_LoaiHang"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MatHangRow : System.Data.DataRow {
            
            private MatHangDataTable tableMatHang;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MatHangRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMatHang = ((MatHangDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaMH {
                get {
                    return ((int)(this[this.tableMatHang.MaMHColumn]));
                }
                set {
                    this[this.tableMatHang.MaMHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenMH {
                get {
                    return ((string)(this[this.tableMatHang.TenMHColumn]));
                }
                set {
                    this[this.tableMatHang.TenMHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaNCC {
                get {
                    try {
                        return ((int)(this[this.tableMatHang.MaNCCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaNCC\' in table \'MatHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMatHang.MaNCCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaLH {
                get {
                    try {
                        return ((byte)(this[this.tableMatHang.MaLHColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaLH\' in table \'MatHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMatHang.MaLHColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVT {
                get {
                    try {
                        return ((string)(this[this.tableMatHang.DVTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DVT\' in table \'MatHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMatHang.DVTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DonGia {
                get {
                    try {
                        return ((decimal)(this[this.tableMatHang.DonGiaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DonGia\' in table \'MatHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMatHang.DonGiaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SoTon {
                get {
                    try {
                        return ((double)(this[this.tableMatHang.SoTonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SoTon\' in table \'MatHang\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMatHang.SoTonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow LoaiHangRow {
                get {
                    return ((LoaiHangRow)(this.GetParentRow(this.Table.ParentRelations["fk_MatHang_LoaiHang"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fk_MatHang_LoaiHang"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaNCCNull() {
                return this.IsNull(this.tableMatHang.MaNCCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaNCCNull() {
                this[this.tableMatHang.MaNCCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaLHNull() {
                return this.IsNull(this.tableMatHang.MaLHColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaLHNull() {
                this[this.tableMatHang.MaLHColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVTNull() {
                return this.IsNull(this.tableMatHang.DVTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVTNull() {
                this[this.tableMatHang.DVTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDonGiaNull() {
                return this.IsNull(this.tableMatHang.DonGiaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDonGiaNull() {
                this[this.tableMatHang.DonGiaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoTonNull() {
                return this.IsNull(this.tableMatHang.SoTonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoTonNull() {
                this[this.tableMatHang.SoTonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow[] GetCTHDRows() {
                return ((CTHDRow[])(base.GetChildRows(this.Table.ChildRelations["fk_CTHD_MatHang"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NhanVienRow : System.Data.DataRow {
            
            private NhanVienDataTable tableNhanVien;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NhanVienRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNhanVien = ((NhanVienDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaNV {
                get {
                    return ((int)(this[this.tableNhanVien.MaNVColumn]));
                }
                set {
                    this[this.tableNhanVien.MaNVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ho {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.HoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Ho\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.HoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ten {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.TenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Ten\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.TenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phai {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.PhaiColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Phai\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.PhaiColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiaChi {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.DiaChiColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiaChi\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.DiaChiColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DienThoai {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.DienThoaiColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DienThoai\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.DienThoaiColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Hinh {
                get {
                    try {
                        return ((byte[])(this[this.tableNhanVien.HinhColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Hinh\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.HinhColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LuongCB {
                get {
                    try {
                        return ((double)(this[this.tableNhanVien.LuongCBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LuongCB\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.LuongCBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CongViec {
                get {
                    try {
                        return ((string)(this[this.tableNhanVien.CongViecColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CongViec\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.CongViecColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MaKV {
                get {
                    try {
                        return ((byte)(this[this.tableNhanVien.MaKVColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MaKV\' in table \'NhanVien\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNhanVien.MaKVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoNull() {
                return this.IsNull(this.tableNhanVien.HoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoNull() {
                this[this.tableNhanVien.HoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenNull() {
                return this.IsNull(this.tableNhanVien.TenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenNull() {
                this[this.tableNhanVien.TenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaiNull() {
                return this.IsNull(this.tableNhanVien.PhaiColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaiNull() {
                this[this.tableNhanVien.PhaiColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiaChiNull() {
                return this.IsNull(this.tableNhanVien.DiaChiColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiaChiNull() {
                this[this.tableNhanVien.DiaChiColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDienThoaiNull() {
                return this.IsNull(this.tableNhanVien.DienThoaiColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDienThoaiNull() {
                this[this.tableNhanVien.DienThoaiColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHinhNull() {
                return this.IsNull(this.tableNhanVien.HinhColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHinhNull() {
                this[this.tableNhanVien.HinhColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLuongCBNull() {
                return this.IsNull(this.tableNhanVien.LuongCBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLuongCBNull() {
                this[this.tableNhanVien.LuongCBColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCongViecNull() {
                return this.IsNull(this.tableNhanVien.CongViecColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCongViecNull() {
                this[this.tableNhanVien.CongViecColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaKVNull() {
                return this.IsNull(this.tableNhanVien.MaKVColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaKVNull() {
                this[this.tableNhanVien.MaKVColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CTHDRowChangeEvent : System.EventArgs {
            
            private CTHDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRowChangeEvent(CTHDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTHDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HoaDonRowChangeEvent : System.EventArgs {
            
            private HoaDonRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRowChangeEvent(HoaDonRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoaiHangRowChangeEvent : System.EventArgs {
            
            private LoaiHangRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRowChangeEvent(LoaiHangRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoaiHangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MatHangRowChangeEvent : System.EventArgs {
            
            private MatHangRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRowChangeEvent(MatHangRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MatHangRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NhanVienRowChangeEvent : System.EventArgs {
            
            private NhanVienRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRowChangeEvent(NhanVienRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NhanVienRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QuanLy.SieuThiDataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CTHDTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CTHDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CTHD";
            tableMapping.ColumnMappings.Add("SoHD", "SoHD");
            tableMapping.ColumnMappings.Add("MaMH", "MaMH");
            tableMapping.ColumnMappings.Add("DGBan", "DGBan");
            tableMapping.ColumnMappings.Add("SL", "SL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CTHD] WHERE (([SoHD] = @Original_SoHD) AND ([MaMH] = @Original" +
                "_MaMH) AND ([DGBan] = @Original_DGBan) AND ([SL] = @Original_SL))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DGBan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DGBan", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SL", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CTHD] ([SoHD], [MaMH], [DGBan], [SL]) VALUES (@SoHD, @MaMH, @D" +
                "GBan, @SL);\r\nSELECT SoHD, MaMH, DGBan, SL FROM CTHD WHERE (MaMH = @MaMH) AND (So" +
                "HD = @SoHD)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DGBan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DGBan", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SL", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CTHD] SET [SoHD] = @SoHD, [MaMH] = @MaMH, [DGBan] = @DGBan, [SL] = @SL WHERE (([SoHD] = @Original_SoHD) AND ([MaMH] = @Original_MaMH) AND ([DGBan] = @Original_DGBan) AND ([SL] = @Original_SL));
SELECT SoHD, MaMH, DGBan, SL FROM CTHD WHERE (MaMH = @MaMH) AND (SoHD = @SoHD)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DGBan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DGBan", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SL", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SL", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DGBan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DGBan", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SL", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SL", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QuanLy.Properties.Settings.Default.SieuThiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SoHD, MaMH, DGBan, SL FROM dbo.CTHD";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SieuThiDataSet1.CTHDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SieuThiDataSet1.CTHDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SieuThiDataSet1.CTHDDataTable dataTable = new SieuThiDataSet1.CTHDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1.CTHDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "CTHD");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SoHD, int Original_MaMH, int Original_DGBan, short Original_SL) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SoHD));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_MaMH));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_DGBan));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((short)(Original_SL));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SoHD, int MaMH, int DGBan, short SL) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SoHD));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(MaMH));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DGBan));
            this.Adapter.InsertCommand.Parameters[3].Value = ((short)(SL));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SoHD, int MaMH, int DGBan, short SL, int Original_SoHD, int Original_MaMH, int Original_DGBan, short Original_SL) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SoHD));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(MaMH));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DGBan));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(SL));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_SoHD));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_MaMH));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_DGBan));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((short)(Original_SL));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HoaDonTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HoaDonTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HoaDon";
            tableMapping.ColumnMappings.Add("SoHD", "SoHD");
            tableMapping.ColumnMappings.Add("MaNV", "MaNV");
            tableMapping.ColumnMappings.Add("NgayHD", "NgayHD");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HoaDon] WHERE (([SoHD] = @Original_SoHD) AND ((@IsNull_MaNV = " +
                "1 AND [MaNV] IS NULL) OR ([MaNV] = @Original_MaNV)) AND ((@IsNull_NgayHD = 1 AND" +
                " [NgayHD] IS NULL) OR ([NgayHD] = @Original_NgayHD)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NgayHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NgayHD", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HoaDon] ([SoHD], [MaNV], [NgayHD]) VALUES (@SoHD, @MaNV, @Ngay" +
                "HD);\r\nSELECT SoHD, MaNV, NgayHD FROM HoaDon WHERE (SoHD = @SoHD)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NgayHD", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HoaDon] SET [SoHD] = @SoHD, [MaNV] = @MaNV, [NgayHD] = @NgayHD WHERE (([SoHD] = @Original_SoHD) AND ((@IsNull_MaNV = 1 AND [MaNV] IS NULL) OR ([MaNV] = @Original_MaNV)) AND ((@IsNull_NgayHD = 1 AND [NgayHD] IS NULL) OR ([NgayHD] = @Original_NgayHD)));
SELECT SoHD, MaNV, NgayHD FROM HoaDon WHERE (SoHD = @SoHD)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NgayHD", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_NgayHD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NgayHD", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "NgayHD", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QuanLy.Properties.Settings.Default.SieuThiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SoHD, MaNV, NgayHD FROM dbo.HoaDon";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SieuThiDataSet1.HoaDonDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SieuThiDataSet1.HoaDonDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SieuThiDataSet1.HoaDonDataTable dataTable = new SieuThiDataSet1.HoaDonDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1.HoaDonDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "HoaDon");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SoHD, System.Nullable<int> Original_MaNV, System.Nullable<System.DateTime> Original_NgayHD) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SoHD));
            if ((Original_MaNV.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_MaNV.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_NgayHD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_NgayHD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SoHD, System.Nullable<int> MaNV, System.Nullable<System.DateTime> NgayHD) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SoHD));
            if ((MaNV.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(MaNV.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((NgayHD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(NgayHD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SoHD, System.Nullable<int> MaNV, System.Nullable<System.DateTime> NgayHD, int Original_SoHD, System.Nullable<int> Original_MaNV, System.Nullable<System.DateTime> Original_NgayHD) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SoHD));
            if ((MaNV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(MaNV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((NgayHD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(NgayHD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SoHD));
            if ((Original_MaNV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_MaNV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_NgayHD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Original_NgayHD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LoaiHangTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoaiHangTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LoaiHang";
            tableMapping.ColumnMappings.Add("MaLH", "MaLH");
            tableMapping.ColumnMappings.Add("TenLH", "TenLH");
            tableMapping.ColumnMappings.Add("MoTa", "MoTa");
            tableMapping.ColumnMappings.Add("Hinh", "Hinh");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LoaiHang] WHERE (([MaLH] = @Original_MaLH) AND ([TenLH] = @Ori" +
                "ginal_TenLH))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TenLH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LoaiHang] ([MaLH], [TenLH], [MoTa], [Hinh]) VALUES (@MaLH, @Te" +
                "nLH, @MoTa, @Hinh);\r\nSELECT MaLH, TenLH, MoTa, Hinh FROM LoaiHang WHERE (MaLH = " +
                "@MaLH)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TenLH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MoTa", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "MoTa", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Hinh", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "Hinh", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LoaiHang] SET [MaLH] = @MaLH, [TenLH] = @TenLH, [MoTa] = @MoTa, [Hi" +
                "nh] = @Hinh WHERE (([MaLH] = @Original_MaLH) AND ([TenLH] = @Original_TenLH));\r\n" +
                "SELECT MaLH, TenLH, MoTa, Hinh FROM LoaiHang WHERE (MaLH = @MaLH)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TenLH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MoTa", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "MoTa", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Hinh", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "Hinh", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TenLH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QuanLy.Properties.Settings.Default.SieuThiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MaLH, TenLH, MoTa, Hinh FROM dbo.LoaiHang";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SieuThiDataSet1.LoaiHangDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SieuThiDataSet1.LoaiHangDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SieuThiDataSet1.LoaiHangDataTable dataTable = new SieuThiDataSet1.LoaiHangDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1.LoaiHangDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "LoaiHang");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(byte Original_MaLH, string Original_TenLH) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((byte)(Original_MaLH));
            if ((Original_TenLH == null)) {
                throw new System.ArgumentNullException("Original_TenLH");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TenLH));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(byte MaLH, string TenLH, string MoTa, byte[] Hinh) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((byte)(MaLH));
            if ((TenLH == null)) {
                throw new System.ArgumentNullException("TenLH");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TenLH));
            }
            if ((MoTa == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MoTa));
            }
            if ((Hinh == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((byte[])(Hinh));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(byte MaLH, string TenLH, string MoTa, byte[] Hinh, byte Original_MaLH, string Original_TenLH) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((byte)(MaLH));
            if ((TenLH == null)) {
                throw new System.ArgumentNullException("TenLH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TenLH));
            }
            if ((MoTa == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MoTa));
            }
            if ((Hinh == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(Hinh));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((byte)(Original_MaLH));
            if ((Original_TenLH == null)) {
                throw new System.ArgumentNullException("Original_TenLH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TenLH));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MatHangTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MatHangTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MatHang";
            tableMapping.ColumnMappings.Add("MaMH", "MaMH");
            tableMapping.ColumnMappings.Add("TenMH", "TenMH");
            tableMapping.ColumnMappings.Add("MaNCC", "MaNCC");
            tableMapping.ColumnMappings.Add("MaLH", "MaLH");
            tableMapping.ColumnMappings.Add("DVT", "DVT");
            tableMapping.ColumnMappings.Add("DonGia", "DonGia");
            tableMapping.ColumnMappings.Add("SoTon", "SoTon");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[MatHang] WHERE (([MaMH] = @Original_MaMH) AND ([TenMH] = @Original_TenMH) AND ((@IsNull_MaNCC = 1 AND [MaNCC] IS NULL) OR ([MaNCC] = @Original_MaNCC)) AND ((@IsNull_MaLH = 1 AND [MaLH] IS NULL) OR ([MaLH] = @Original_MaLH)) AND ((@IsNull_DVT = 1 AND [DVT] IS NULL) OR ([DVT] = @Original_DVT)) AND ((@IsNull_DonGia = 1 AND [DonGia] IS NULL) OR ([DonGia] = @Original_DonGia)) AND ((@IsNull_SoTon = 1 AND [SoTon] IS NULL) OR ([SoTon] = @Original_SoTon)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TenMH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaLH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DVT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DonGia", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonGia", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SoTon", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoTon", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MatHang] ([MaMH], [TenMH], [MaNCC], [MaLH], [DVT], [DonGia], [" +
                "SoTon]) VALUES (@MaMH, @TenMH, @MaNCC, @MaLH, @DVT, @DonGia, @SoTon);\r\nSELECT Ma" +
                "MH, TenMH, MaNCC, MaLH, DVT, DonGia, SoTon FROM MatHang WHERE (MaMH = @MaMH)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TenMH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonGia", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoTon", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MatHang] SET [MaMH] = @MaMH, [TenMH] = @TenMH, [MaNCC] = @MaNCC, [MaLH] = @MaLH, [DVT] = @DVT, [DonGia] = @DonGia, [SoTon] = @SoTon WHERE (([MaMH] = @Original_MaMH) AND ([TenMH] = @Original_TenMH) AND ((@IsNull_MaNCC = 1 AND [MaNCC] IS NULL) OR ([MaNCC] = @Original_MaNCC)) AND ((@IsNull_MaLH = 1 AND [MaLH] IS NULL) OR ([MaLH] = @Original_MaLH)) AND ((@IsNull_DVT = 1 AND [DVT] IS NULL) OR ([DVT] = @Original_DVT)) AND ((@IsNull_DonGia = 1 AND [DonGia] IS NULL) OR ([DonGia] = @Original_DonGia)) AND ((@IsNull_SoTon = 1 AND [SoTon] IS NULL) OR ([SoTon] = @Original_SoTon)));
SELECT MaMH, TenMH, MaNCC, MaLH, DVT, DonGia, SoTon FROM MatHang WHERE (MaMH = @MaMH)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TenMH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenMH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonGia", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SoTon", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaMH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TenMH", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TenMH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNCC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNCC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaLH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaLH", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaLH", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DVT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DVT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DonGia", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonGia", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "DonGia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SoTon", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SoTon", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SoTon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QuanLy.Properties.Settings.Default.SieuThiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MaMH, TenMH, MaNCC, MaLH, DVT, DonGia, SoTon FROM dbo.MatHang";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SieuThiDataSet1.MatHangDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SieuThiDataSet1.MatHangDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SieuThiDataSet1.MatHangDataTable dataTable = new SieuThiDataSet1.MatHangDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1.MatHangDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "MatHang");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MaMH, string Original_TenMH, System.Nullable<int> Original_MaNCC, System.Nullable<byte> Original_MaLH, string Original_DVT, System.Nullable<decimal> Original_DonGia, System.Nullable<double> Original_SoTon) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MaMH));
            if ((Original_TenMH == null)) {
                throw new System.ArgumentNullException("Original_TenMH");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TenMH));
            }
            if ((Original_MaNCC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_MaNCC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_MaLH.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((byte)(Original_MaLH.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_DVT == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_DVT));
            }
            if ((Original_DonGia.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_DonGia.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_SoTon.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_SoTon.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MaMH, string TenMH, System.Nullable<int> MaNCC, System.Nullable<byte> MaLH, string DVT, System.Nullable<decimal> DonGia, System.Nullable<double> SoTon) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MaMH));
            if ((TenMH == null)) {
                throw new System.ArgumentNullException("TenMH");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TenMH));
            }
            if ((MaNCC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(MaNCC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((MaLH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((byte)(MaLH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((DVT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DVT));
            }
            if ((DonGia.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(DonGia.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((SoTon.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(SoTon.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MaMH, string TenMH, System.Nullable<int> MaNCC, System.Nullable<byte> MaLH, string DVT, System.Nullable<decimal> DonGia, System.Nullable<double> SoTon, int Original_MaMH, string Original_TenMH, System.Nullable<int> Original_MaNCC, System.Nullable<byte> Original_MaLH, string Original_DVT, System.Nullable<decimal> Original_DonGia, System.Nullable<double> Original_SoTon) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MaMH));
            if ((TenMH == null)) {
                throw new System.ArgumentNullException("TenMH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TenMH));
            }
            if ((MaNCC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(MaNCC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((MaLH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte)(MaLH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((DVT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DVT));
            }
            if ((DonGia.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(DonGia.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((SoTon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(SoTon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_MaMH));
            if ((Original_TenMH == null)) {
                throw new System.ArgumentNullException("Original_TenMH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_TenMH));
            }
            if ((Original_MaNCC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_MaNCC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_MaLH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((byte)(Original_MaLH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_DVT == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_DVT));
            }
            if ((Original_DonGia.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_DonGia.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_SoTon.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(Original_SoTon.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NhanVienTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NhanVienTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NhanVien";
            tableMapping.ColumnMappings.Add("MaNV", "MaNV");
            tableMapping.ColumnMappings.Add("Ho", "Ho");
            tableMapping.ColumnMappings.Add("Ten", "Ten");
            tableMapping.ColumnMappings.Add("Phai", "Phai");
            tableMapping.ColumnMappings.Add("DiaChi", "DiaChi");
            tableMapping.ColumnMappings.Add("DienThoai", "DienThoai");
            tableMapping.ColumnMappings.Add("Hinh", "Hinh");
            tableMapping.ColumnMappings.Add("LuongCB", "LuongCB");
            tableMapping.ColumnMappings.Add("CongViec", "CongViec");
            tableMapping.ColumnMappings.Add("MaKV", "MaKV");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[NhanVien] WHERE (([MaNV] = @Original_MaNV) AND ((@IsNull_Ho = 1 AND [Ho] IS NULL) OR ([Ho] = @Original_Ho)) AND ((@IsNull_Ten = 1 AND [Ten] IS NULL) OR ([Ten] = @Original_Ten)) AND ((@IsNull_Phai = 1 AND [Phai] IS NULL) OR ([Phai] = @Original_Phai)) AND ((@IsNull_DiaChi = 1 AND [DiaChi] IS NULL) OR ([DiaChi] = @Original_DiaChi)) AND ((@IsNull_DienThoai = 1 AND [DienThoai] IS NULL) OR ([DienThoai] = @Original_DienThoai)) AND ((@IsNull_LuongCB = 1 AND [LuongCB] IS NULL) OR ([LuongCB] = @Original_LuongCB)) AND ((@IsNull_CongViec = 1 AND [CongViec] IS NULL) OR ([CongViec] = @Original_CongViec)) AND ((@IsNull_MaKV = 1 AND [MaKV] IS NULL) OR ([MaKV] = @Original_MaKV)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Ho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Ho", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Ten", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Ten", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Phai", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Phai", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DiaChi", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DiaChi", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DienThoai", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DienThoai", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LuongCB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LuongCB", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CongViec", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CongViec", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaKV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaKV", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[NhanVien] ([MaNV], [Ho], [Ten], [Phai], [DiaChi], [DienThoai], [Hinh], [LuongCB], [CongViec], [MaKV]) VALUES (@MaNV, @Ho, @Ten, @Phai, @DiaChi, @DienThoai, @Hinh, @LuongCB, @CongViec, @MaKV);
SELECT MaNV, Ho, Ten, Phai, DiaChi, DienThoai, Hinh, LuongCB, CongViec, MaKV FROM NhanVien WHERE (MaNV = @MaNV)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Ho", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Ten", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phai", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DiaChi", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DienThoai", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Hinh", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "Hinh", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LuongCB", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CongViec", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaKV", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[NhanVien] SET [MaNV] = @MaNV, [Ho] = @Ho, [Ten] = @Ten, [Phai] = @Phai, [DiaChi] = @DiaChi, [DienThoai] = @DienThoai, [Hinh] = @Hinh, [LuongCB] = @LuongCB, [CongViec] = @CongViec, [MaKV] = @MaKV WHERE (([MaNV] = @Original_MaNV) AND ((@IsNull_Ho = 1 AND [Ho] IS NULL) OR ([Ho] = @Original_Ho)) AND ((@IsNull_Ten = 1 AND [Ten] IS NULL) OR ([Ten] = @Original_Ten)) AND ((@IsNull_Phai = 1 AND [Phai] IS NULL) OR ([Phai] = @Original_Phai)) AND ((@IsNull_DiaChi = 1 AND [DiaChi] IS NULL) OR ([DiaChi] = @Original_DiaChi)) AND ((@IsNull_DienThoai = 1 AND [DienThoai] IS NULL) OR ([DienThoai] = @Original_DienThoai)) AND ((@IsNull_LuongCB = 1 AND [LuongCB] IS NULL) OR ([LuongCB] = @Original_LuongCB)) AND ((@IsNull_CongViec = 1 AND [CongViec] IS NULL) OR ([CongViec] = @Original_CongViec)) AND ((@IsNull_MaKV = 1 AND [MaKV] IS NULL) OR ([MaKV] = @Original_MaKV)));
SELECT MaNV, Ho, Ten, Phai, DiaChi, DienThoai, Hinh, LuongCB, CongViec, MaKV FROM NhanVien WHERE (MaNV = @MaNV)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Ho", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Ten", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phai", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DiaChi", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DienThoai", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Hinh", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "Hinh", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LuongCB", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CongViec", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaKV", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaNV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaNV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Ho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Ho", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Ten", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Ten", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ten", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Phai", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Phai", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phai", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DiaChi", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DiaChi", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DiaChi", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DienThoai", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DienThoai", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DienThoai", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LuongCB", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LuongCB", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "LuongCB", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CongViec", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CongViec", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CongViec", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MaKV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaKV", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "MaKV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QuanLy.Properties.Settings.Default.SieuThiConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MaNV, Ho, Ten, Phai, DiaChi, DienThoai, Hinh, LuongCB, CongViec, MaKV FROM" +
                " dbo.NhanVien";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SieuThiDataSet1.NhanVienDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SieuThiDataSet1.NhanVienDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SieuThiDataSet1.NhanVienDataTable dataTable = new SieuThiDataSet1.NhanVienDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1.NhanVienDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SieuThiDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "NhanVien");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MaNV, string Original_Ho, string Original_Ten, string Original_Phai, string Original_DiaChi, string Original_DienThoai, System.Nullable<double> Original_LuongCB, string Original_CongViec, System.Nullable<byte> Original_MaKV) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MaNV));
            if ((Original_Ho == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Ho));
            }
            if ((Original_Ten == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Ten));
            }
            if ((Original_Phai == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Phai));
            }
            if ((Original_DiaChi == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DiaChi));
            }
            if ((Original_DienThoai == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_DienThoai));
            }
            if ((Original_LuongCB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_LuongCB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_CongViec == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_CongViec));
            }
            if ((Original_MaKV.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((byte)(Original_MaKV.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MaNV, string Ho, string Ten, string Phai, string DiaChi, string DienThoai, byte[] Hinh, System.Nullable<double> LuongCB, string CongViec, System.Nullable<byte> MaKV) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MaNV));
            if ((Ho == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Ho));
            }
            if ((Ten == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Ten));
            }
            if ((Phai == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Phai));
            }
            if ((DiaChi == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DiaChi));
            }
            if ((DienThoai == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DienThoai));
            }
            if ((Hinh == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((byte[])(Hinh));
            }
            if ((LuongCB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(LuongCB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((CongViec == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CongViec));
            }
            if ((MaKV.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((byte)(MaKV.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int MaNV, 
                    string Ho, 
                    string Ten, 
                    string Phai, 
                    string DiaChi, 
                    string DienThoai, 
                    byte[] Hinh, 
                    System.Nullable<double> LuongCB, 
                    string CongViec, 
                    System.Nullable<byte> MaKV, 
                    int Original_MaNV, 
                    string Original_Ho, 
                    string Original_Ten, 
                    string Original_Phai, 
                    string Original_DiaChi, 
                    string Original_DienThoai, 
                    System.Nullable<double> Original_LuongCB, 
                    string Original_CongViec, 
                    System.Nullable<byte> Original_MaKV) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MaNV));
            if ((Ho == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Ho));
            }
            if ((Ten == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Ten));
            }
            if ((Phai == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Phai));
            }
            if ((DiaChi == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DiaChi));
            }
            if ((DienThoai == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DienThoai));
            }
            if ((Hinh == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(Hinh));
            }
            if ((LuongCB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(LuongCB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((CongViec == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CongViec));
            }
            if ((MaKV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte)(MaKV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_MaNV));
            if ((Original_Ho == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Ho));
            }
            if ((Original_Ten == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_Ten));
            }
            if ((Original_Phai == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Phai));
            }
            if ((Original_DiaChi == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_DiaChi));
            }
            if ((Original_DienThoai == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_DienThoai));
            }
            if ((Original_LuongCB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_LuongCB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_CongViec == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_CongViec));
            }
            if ((Original_MaKV.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((byte)(Original_MaKV.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591